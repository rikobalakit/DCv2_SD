// Generated by ChatGPT and Riko Balakit/Pearl Grey
using UnityEngine;

namespace GSA
{
    public class InputManager : BaseManager
    {
        private GameControls _gameControls;
        
        public const float DEADZONE_JOYSTICK_RADIUS = 0.3f;
        public const float DEADZONE_TRIGGER_THRESHOLD = 0.1f;
        
        public static InputManager I;

        private void Awake()
        {
            _gameControls = new GameControls();

            // Enable input controls
            _gameControls.Controls.Enable();
            
            if (I != null)
            {
                Debug.LogError("cannot initialize another input manager");
            }

            I = this;
        }

        private void Update()
        {
            // Fill in control states from the input system
            var controlState = _gameManager.CurrentControlState;

            // Joysticks
            controlState.LeftJoystick = _gameControls.Controls.Joystick_Left.ReadValue<Vector2>();
            controlState.RightJoystick = _gameControls.Controls.Joystick_Right.ReadValue<Vector2>();

            // D-Pad
            controlState.DPadUp = _gameControls.Controls.Button_Dpad_Up.ReadValue<float>() > 0f;
            controlState.DPadDown = _gameControls.Controls.Button_Dpad_Down.ReadValue<float>() > 0f;
            controlState.DPadLeft = _gameControls.Controls.Button_Dpad_Left.ReadValue<float>() > 0f;
            controlState.DPadRight = _gameControls.Controls.Button_Dpad_Right.ReadValue<float>() > 0f;

            // Face Buttons
            controlState.FaceA = _gameControls.Controls.Button_Face_South.ReadValue<float>() > 0f; // A Button
            controlState.FaceB = _gameControls.Controls.Button_Face_East.ReadValue<float>() > 0f;  // B Button
            controlState.FaceX = _gameControls.Controls.Button_Face_West.ReadValue<float>() > 0f;  // X Button
            controlState.FaceY = _gameControls.Controls.Button_Face_North.ReadValue<float>() > 0f; // Y Button

            // Bumpers
            controlState.L1Button = _gameControls.Controls.Button_Bumper_Left.ReadValue<float>() > 0f;
            controlState.R1Button = _gameControls.Controls.Button_Bumper_Right.ReadValue<float>() > 0f;

            // Joystick Buttons
            controlState.L3Button = _gameControls.Controls.Button_Joystick_Left.ReadValue<float>() > 0f;
            controlState.R3Button = _gameControls.Controls.Button_Joystick_Right.ReadValue<float>() > 0f;

            // Paddles (Optional: Add bindings for paddle buttons if they exist)
            controlState.L4Button = false; // Placeholder; add actual bindings if needed
            controlState.L5Button = false; // Placeholder; add actual bindings if needed
            controlState.R4Button = false; // Placeholder; add actual bindings if needed
            controlState.R5Button = false; // Placeholder; add actual bindings if needed

            // Triggers
            controlState.LeftTrigger = _gameControls.Controls.Trigger_Left.ReadValue<float>();
            controlState.RightTrigger = _gameControls.Controls.Trigger_Right.ReadValue<float>();

            // Start and Select
            controlState.StartButton = _gameControls.Controls.Button_Start.ReadValue<float>() > 0f;
            controlState.SelectButton = _gameControls.Controls.Button_Select.ReadValue<float>() > 0f;

            // Timestamp (optional but useful for tracking updates)
            controlState.Timestamp = System.DateTimeOffset.UtcNow.ToUnixTimeMilliseconds();
        }

        private void OnDestroy()
        {
            // Disable input controls when the manager is destroyed
            _gameControls.Controls.Disable();
        }

        // Directional Pad
        public bool DPadUpPressed => _gameManager.CurrentControlState.DPadUp;
        public bool DPadDownPressed => _gameManager.CurrentControlState.DPadDown;
        public bool DPadLeftPressed => _gameManager.CurrentControlState.DPadLeft;
        public bool DPadRightPressed => _gameManager.CurrentControlState.DPadRight;

        // Triggers
        public float L2 => _gameManager.CurrentControlState.LeftTrigger;
        public float R2 => _gameManager.CurrentControlState.RightTrigger;

        // Bumpers
        public bool L1 => _gameManager.CurrentControlState.L1Button;
        public bool R1 => _gameManager.CurrentControlState.R1Button;

        // Joystick Presses
        public bool L3 => _gameManager.CurrentControlState.L3Button;
        public bool R3 => _gameManager.CurrentControlState.R3Button;

        // Paddle Buttons (Placeholder until bindings exist)
        public bool L4 => _gameManager.CurrentControlState.L4Button;
        public bool R4 => _gameManager.CurrentControlState.R4Button;

        // Joystick Axes
        public float LX => _gameManager.CurrentControlState.LeftJoystick.x;
        public float LY => _gameManager.CurrentControlState.LeftJoystick.y;
        public float RX => _gameManager.CurrentControlState.RightJoystick.x;
        public float RY => _gameManager.CurrentControlState.RightJoystick.y;
        
        public bool FaceA => _gameManager.CurrentControlState.FaceA;
        public bool FaceB => _gameManager.CurrentControlState.FaceB;
        public bool FaceX => _gameManager.CurrentControlState.FaceX;
            
        public bool FaceY => _gameManager.CurrentControlState.FaceY;
        
        public bool StartButton => _gameManager.CurrentControlState.StartButton;
        public bool SelectButton => _gameManager.CurrentControlState.SelectButton;

        public short Heading
        {
            get
            {
                var controlState = _gameManager.CurrentControlState;
                
                var headingDirectionRaw = (Mathf.Rad2Deg * Mathf.Atan(controlState.RightJoystick.y / controlState.RightJoystick.x)) + 90f;
            
                if (headingDirectionRaw > 180f)
                {
                    headingDirectionRaw -= 360f;
                }

                if (controlState.RightJoystick.x < 0f)
                {
                    headingDirectionRaw -= 180f;
                }

                return (short)headingDirectionRaw;
            }
        }
    }
}
