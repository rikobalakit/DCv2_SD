<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Tmds.DBus</name>
    </assembly>
    <members>
        <member name="T:Tmds.DBus.Address">
            <summary>
            Helper class for determining D-Bus addresses.
            </summary>
        </member>
        <member name="P:Tmds.DBus.Address.System">
            <summary>
            Address of System bus.
            </summary>
        </member>
        <member name="P:Tmds.DBus.Address.Session">
            <summary>
            Address of Session bus.
            </summary>
        </member>
        <member name="T:Tmds.DBus.ArgumentAttribute">
            <summary>
            Indicates the method return type or signal type represents a single D-Bus argument.
            </summary>
        </member>
        <member name="P:Tmds.DBus.ArgumentAttribute.Name">
            <summary>
            Name of the argument.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ArgumentAttribute.#ctor(System.String)">
            <summary>
            Creates an instance of the ArgumentAttribute with the specified name.
            </summary>
            <param name="name">Name of the argument.</param>
        </member>
        <member name="M:Tmds.DBus.ArgumentAttribute.#ctor">
            <summary>
            Creates an instance of the ArgumentAttribute.
            </summary>
        </member>
        <member name="T:Tmds.DBus.ClientConnectionOptions">
            <summary>
            Options that configure the behavior of a Connection to a remote peer.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ClientConnectionOptions.#ctor(System.String)">
            <summary>
            Creates a new Connection with a specific address.
            </summary>
            <param name="address">Address of the D-Bus peer.</param>
        </member>
        <member name="M:Tmds.DBus.ClientConnectionOptions.#ctor">
            <summary>
            Base constructor for derived types.
            </summary>
        </member>
        <member name="P:Tmds.DBus.ClientConnectionOptions.AutoConnect">
            <summary>
            Automatically connect and re-connect the Connection.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ClientConnectionOptions.SetupAsync">
            <summary>
            Sets up tunnel/connects to the remote peer.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ClientConnectionOptions.Teardown(System.Object)">
            <summary>
            Action to clean up resources created during succesfull execution of SetupAsync.
            </summary>
        </member>
        <member name="T:Tmds.DBus.ClientSetupResult">
            <summary>
            Result of ClientConnectionOptions.SetupAsync
            </summary>
        </member>
        <member name="P:Tmds.DBus.ClientSetupResult.ConnectionAddress">
            <summary>
            Address of the D-Bus peer.
            </summary>
        </member>
        <member name="P:Tmds.DBus.ClientSetupResult.TeardownToken">
            <summary>
            Object passed to ConnectionOptions.Teardown.
            </summary>
        </member>
        <member name="P:Tmds.DBus.ClientSetupResult.UserId">
            <summary>
            Authentication User ID (Linux UID).
            </summary>
        </member>
        <member name="P:Tmds.DBus.ClientSetupResult.SupportsFdPassing">
            <summary>
            Indicates whether the connection supports Fd passing.
            </summary>
        </member>
        <member name="T:Tmds.DBus.CloseSafeHandle">
            <summary>
            Generic file descriptor SafeHandle.
            </summary>
        </member>
        <member name="M:Tmds.DBus.CloseSafeHandle.#ctor(System.IntPtr,System.Boolean)">
            <summary>
            Creates a new CloseSafeHandle.
            </summary>
            <param name="preexistingHandle">An IntPtr object that represents the pre-existing handle to use.</param>
            <param name="ownsHandle"><c>true</c> to reliably release the handle during the finalization phase; <c>false</c> to prevent reliable release.</param>
        </member>
        <member name="P:Tmds.DBus.CloseSafeHandle.IsInvalid">
            <summary>
            Gets a value that indicates whether the handle is invalid.
            </summary>
        </member>
        <member name="M:Tmds.DBus.CloseSafeHandle.ReleaseHandle">
            <summary>
            When overridden in a derived class, executes the code required to free the handle.
            </summary>
        </member>
        <member name="T:Tmds.DBus.ConnectException">
            <summary>
            Exception thrown when the D-Bus connection cannot be succesfully established.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ConnectException.#ctor(System.String)">
            <summary>
            Creates an instance of the ConnectException with the specified message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="M:Tmds.DBus.ConnectException.#ctor(System.String,System.Exception)">
            <summary>
            Creates an instance of the ConnectException with the specified message and innerException.
            </summary>
            <param name="message">The error message that explains the reason for the exception..</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference if no inner exception is specified.</param>
        </member>
        <member name="T:Tmds.DBus.Connection">
            <summary>
            Connection with a D-Bus peer.
            </summary>
        </member>
        <member name="F:Tmds.DBus.Connection.DynamicAssemblyName">
            <summary>
            Assembly name where the dynamically generated code resides.
            </summary>
        </member>
        <member name="P:Tmds.DBus.Connection.System">
            <summary>
            An AutoConnect Connection to the system bus.
            </summary>
        </member>
        <member name="P:Tmds.DBus.Connection.Session">
            <summary>
            An AutoConnect Connection to the session bus.
            </summary>
        </member>
        <member name="E:Tmds.DBus.Connection.StateChanged">
            <summary>
            Occurs when the state changes.
            </summary>
            <remarks>
            The event handler will be called when it is added to the event.
            The event handler is invoked on the ConnectionOptions.SynchronizationContext.
            </remarks>
        </member>
        <member name="M:Tmds.DBus.Connection.#ctor(System.String)">
            <summary>
            Creates a new Connection with a specific address.
            </summary>
            <param name="address">Address of the D-Bus peer.</param>
        </member>
        <member name="M:Tmds.DBus.Connection.#ctor(Tmds.DBus.ConnectionOptions)">
            <summary>
            Creates a new Connection with specific ConnectionOptions.
            </summary>
            <param name="connectionOptions"></param>
        </member>
        <member name="M:Tmds.DBus.Connection.ConnectAsync">
            <summary>
            Connect with the remote peer.
            </summary>
            <returns>
            Information about the established connection.
            </returns>
            <exception cref="T:Tmds.DBus.ConnectException">There was an error establishing the connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection was closed after it was established.</exception>
        </member>
        <member name="M:Tmds.DBus.Connection.Dispose">
            <summary>
            Disposes the connection.
            </summary>
        </member>
        <member name="M:Tmds.DBus.Connection.CreateProxy``1(System.String,Tmds.DBus.ObjectPath)">
            <summary>
            Creates a proxy object that represents a remote D-Bus object.
            </summary>
            <typeparam name="T">Interface of the D-Bus object.</typeparam>
            <param name="serviceName">Name of the service that exposes the object.</param>
            <param name="path">Object path of the object.</param>
            <returns>
            Proxy object.
            </returns>
        </member>
        <member name="M:Tmds.DBus.Connection.UnregisterServiceAsync(System.String)">
            <summary>
            Releases a service name assigned to the connection.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <returns>
            <c>true</c> when the name was assigned to this connection; <c>false</c> when the name was not assigned to this connection.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection was closed after it was established.</exception>
            <exception cref="T:Tmds.DBus.DBusException">Error returned by remote peer.</exception>
            <remarks>
            This operation is not supported for AutoConnection connections.
            </remarks>
        </member>
        <member name="M:Tmds.DBus.Connection.QueueServiceRegistrationAsync(System.String,System.Action,System.Action,Tmds.DBus.ServiceRegistrationOptions)">
            <summary>
            Queues a service name registration for the connection.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="onAquired">Action invoked when the service name is assigned to the connection.</param>
            <param name="onLost">Action invoked when the service name is no longer assigned to the connection.</param>
            <param name="options">Options for the registration.</param>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection was closed after it was established.</exception>
            <exception cref="T:Tmds.DBus.DBusException">Error returned by remote peer.</exception>
            <exception cref="T:Tmds.DBus.ProtocolException">Unexpected reply.</exception>
            <remarks>
            This operation is not supported for AutoConnection connections.
            </remarks>
        </member>
        <member name="M:Tmds.DBus.Connection.QueueServiceRegistrationAsync(System.String,Tmds.DBus.ServiceRegistrationOptions)">
            <summary>
            Queues a service name registration for the connection.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="options">Options for the registration.</param>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection was closed after it was established.</exception>
            <exception cref="T:Tmds.DBus.DBusException">Error returned by remote peer.</exception>
            <exception cref="T:Tmds.DBus.ProtocolException">Unexpected reply.</exception>
            <remarks>
            This operation is not supported for AutoConnection connections.
            </remarks>
        </member>
        <member name="M:Tmds.DBus.Connection.RegisterServiceAsync(System.String,System.Action,Tmds.DBus.ServiceRegistrationOptions)">
            <summary>
            Requests a service name to be assigned to the connection.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="onLost">Action invoked when the service name is no longer assigned to the connection.</param>
            <param name="options"></param>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection was closed after it was established.</exception>
            <exception cref="T:Tmds.DBus.DBusException">Error returned by remote peer.</exception>
            <remarks>
            This operation is not supported for AutoConnection connections.
            </remarks>
        </member>
        <member name="M:Tmds.DBus.Connection.RegisterServiceAsync(System.String,Tmds.DBus.ServiceRegistrationOptions)">
            <summary>
            Requests a service name to be assigned to the connection.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="options"></param>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection was closed after it was established.</exception>
            <exception cref="T:Tmds.DBus.DBusException">Error returned by remote peer.</exception>
            <remarks>
            This operation is not supported for AutoConnection connections.
            </remarks>
        </member>
        <member name="M:Tmds.DBus.Connection.RegisterObjectAsync(Tmds.DBus.IDBusObject)">
            <summary>
            Publishes an object.
            </summary>
            <param name="o">Object to publish.</param>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection was closed.</exception>
        </member>
        <member name="M:Tmds.DBus.Connection.RegisterObjectsAsync(System.Collections.Generic.IEnumerable{Tmds.DBus.IDBusObject})">
            <summary>
            Publishes objects.
            </summary>
            <param name="objects">Objects to publish.</param>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection was closed.</exception>
            <remarks>
            This operation is not supported for AutoConnection connections.
            </remarks>
        </member>
        <member name="M:Tmds.DBus.Connection.UnregisterObject(Tmds.DBus.ObjectPath)">
            <summary>
            Unpublishes an object.
            </summary>
            <param name="path">Path of object to unpublish.</param>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection is closed.</exception>
        </member>
        <member name="M:Tmds.DBus.Connection.UnregisterObject(Tmds.DBus.IDBusObject)">
            <summary>
            Unpublishes an object.
            </summary>
            <param name="o">object to unpublish.</param>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection is closed.</exception>
        </member>
        <member name="M:Tmds.DBus.Connection.UnregisterObjects(System.Collections.Generic.IEnumerable{Tmds.DBus.ObjectPath})">
            <summary>
            Unpublishes objects.
            </summary>
            <param name="paths">Paths of objects to unpublish.</param>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection is closed.</exception>
            <remarks>
            This operation is not supported for AutoConnection connections.
            </remarks>
        </member>
        <member name="M:Tmds.DBus.Connection.UnregisterObjects(System.Collections.Generic.IEnumerable{Tmds.DBus.IDBusObject})">
            <summary>
            Unpublishes objects.
            </summary>
            <param name="objects">Objects to unpublish.</param>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection is closed.</exception>
            <remarks>
            This operation is not supported for AutoConnection connections.
            </remarks>
        </member>
        <member name="M:Tmds.DBus.Connection.ListActivatableServicesAsync">
            <summary>
            List services that can be activated.
            </summary>
            <returns>
            List of activatable services.
            </returns>
            <exception cref="T:Tmds.DBus.ConnectException">There was an error establishing the connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection is closed.</exception>
        </member>
        <member name="M:Tmds.DBus.Connection.ResolveServiceOwnerAsync(System.String)">
            <summary>
            Resolves the local address for a service.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <returns>
            Local address of service. <c>null</c> is returned when the service name is not available.
            </returns>
            <exception cref="T:Tmds.DBus.ConnectException">There was an error establishing the connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection is closed.</exception>
        </member>
        <member name="M:Tmds.DBus.Connection.ActivateServiceAsync(System.String)">
            <summary>
            Activates a service.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <returns>
            The result of the activation.
            </returns>
            <exception cref="T:Tmds.DBus.ConnectException">There was an error establishing the connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection is closed.</exception>
        </member>
        <member name="M:Tmds.DBus.Connection.IsServiceActiveAsync(System.String)">
            <summary>
            Checks if a service is available.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <returns>
            <c>true</c> when the service is available, <c>false</c> otherwise.
            </returns>
            <exception cref="T:Tmds.DBus.ConnectException">There was an error establishing the connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection is closed.</exception>
        </member>
        <member name="M:Tmds.DBus.Connection.ResolveServiceOwnerAsync(System.String,System.Action{Tmds.DBus.ServiceOwnerChangedEventArgs},System.Action{System.Exception})">
            <summary>
            Resolves the local address for a service.
            </summary>
            <param name="serviceName">Name of the service.</param>
            <param name="handler">Action invoked when the local name of the service changes.</param>
            <param name="onError">Action invoked when the connection closes.</param>
            <returns>
            Disposable that allows to stop receiving notifications.
            </returns>
            <exception cref="T:Tmds.DBus.ConnectException">There was an error establishing the connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection is closed.</exception>
            <remarks>
            The event handler will be called when the service name is already registered.
            </remarks>
        </member>
        <member name="M:Tmds.DBus.Connection.ListServicesAsync">
            <summary>
            List services that are available.
            </summary>
            <returns>
            List of available services.
            </returns>
            <exception cref="T:Tmds.DBus.ConnectException">There was an error establishing the connection.</exception>
            <exception cref="T:System.ObjectDisposedException">The connection has been disposed.</exception>
            <exception cref="T:System.InvalidOperationException">The operation is invalid in the current state.</exception>
            <exception cref="T:Tmds.DBus.DisconnectedException">The connection is closed.</exception>
        </member>
        <member name="T:Tmds.DBus.ConnectionInfo">
            <summary>
            Information about established Connection.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ConnectionInfo.#ctor(System.String)">
            <summary>
            Creates an instance of ConnectionInfo.
            </summary>
            <param name="localName">Name assigned by the bus to the connection.</param>
        </member>
        <member name="P:Tmds.DBus.ConnectionInfo.LocalName">
            <summary>
            Local name assigned by the bus to the connection.
            </summary>
        </member>
        <member name="P:Tmds.DBus.ConnectionInfo.RemoteIsBus">
            <summary>
            Returns whether the remote peer is a bus.
            </summary>
        </member>
        <member name="T:Tmds.DBus.ConnectionOptions">
            <summary>
            Options that configure the behavior of a Connection.
            </summary>
        </member>
        <member name="P:Tmds.DBus.ConnectionOptions.SynchronizationContext">
            <summary>
            SynchronizationContext used for event handlers and callbacks.
            </summary>
        </member>
        <member name="T:Tmds.DBus.ConnectionState">
            <summary>
            State of the Connection.
            </summary>
        </member>
        <member name="F:Tmds.DBus.ConnectionState.Created">
            <summary>No connection attempt has been made.</summary>
        </member>
        <member name="F:Tmds.DBus.ConnectionState.Connecting">
            <summary>Connecting to remote peer.</summary>
        </member>
        <member name="F:Tmds.DBus.ConnectionState.Connected">
            <summary>Connection established.</summary>
        </member>
        <member name="F:Tmds.DBus.ConnectionState.Disconnecting">
            <summary>Connection is closing.</summary>
        </member>
        <member name="F:Tmds.DBus.ConnectionState.Disconnected">
            <summary>Connection is closed.</summary>
        </member>
        <member name="T:Tmds.DBus.ConnectionStateChangedEventArgs">
            <summary>
            Event data for the Connection StateChanged event.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ConnectionStateChangedEventArgs.#ctor(Tmds.DBus.ConnectionState,System.Exception,Tmds.DBus.ConnectionInfo)">
            <summary>
            Creates an instance of ConnectionStateChangedEventArgs.
            </summary>
            <param name="state">State of the connection.</param>
            <param name="disconnectReason">Reason the connection closed.</param>
            <param name="connectionInfo">Information about established connection.</param>
        </member>
        <member name="P:Tmds.DBus.ConnectionStateChangedEventArgs.ConnectionInfo">
            <summary>
            ConnectionInfo for established connection.
            </summary>
            <remarks>
            This property is set for the Connected event.
            </remarks>
        </member>
        <member name="P:Tmds.DBus.ConnectionStateChangedEventArgs.State">
            <summary>
            New connection state.
            </summary>
        </member>
        <member name="P:Tmds.DBus.ConnectionStateChangedEventArgs.DisconnectReason">
            <summary>
            Reason the connection closed.
            </summary>
            <remarks>
            This property is set for the Disconnecting, Disconnected and following Connecting event.
            </remarks>
        </member>
        <member name="T:Tmds.DBus.DBusException">
            <summary>
            Represents the D-Bus error message which is used to signal the unsuccesfull invocation of a method.
            </summary>
        </member>
        <member name="M:Tmds.DBus.DBusException.#ctor(System.String,System.String)">
            <summary>
            Creates a new DBusException with the given name and message.
            </summary>
            <param name="errorName">Name of the error</param>
            <param name="errorMessage">Message of the error</param>
        </member>
        <member name="P:Tmds.DBus.DBusException.ErrorName">
            <summary>
            Name of the error.
            </summary>
        </member>
        <member name="P:Tmds.DBus.DBusException.ErrorMessage">
            <summary>
            Message of the error.
            </summary>
        </member>
        <member name="T:Tmds.DBus.DBusInterfaceAttribute">
            <summary>
            Provides information for mapping the C# interface to a D-Bus interface.
            </summary>    
        </member>
        <member name="P:Tmds.DBus.DBusInterfaceAttribute.Name">
            <summary>
            Name of the D-Bus interface.
            </summary>
        </member>
        <member name="P:Tmds.DBus.DBusInterfaceAttribute.GetPropertyMethod">
            <summary>
            Method name of the property get method. Defaults to <c>GetAsync</c>.
            </summary>
        </member>
        <member name="P:Tmds.DBus.DBusInterfaceAttribute.SetPropertyMethod">
            <summary>
            Method name of the property get method. Defaults to <c>SetAsync</c>.
            </summary>
        </member>
        <member name="P:Tmds.DBus.DBusInterfaceAttribute.GetAllPropertiesMethod">
            <summary>
            Method name of the property get all method. Defaults to <c>GetAllAsync</c>.
            </summary>
        </member>
        <member name="P:Tmds.DBus.DBusInterfaceAttribute.WatchPropertiesMethod">
            <summary>
            Method name of the property get all method. Defaults to <c>WatchPropertiesAsync</c>.
            </summary>
        </member>
        <member name="P:Tmds.DBus.DBusInterfaceAttribute.PropertyType">
            <summary>
            Set to a type decorated with the Dictionary attribute used to provide property introspection information. When unset the type returned by the <c>GetAllPropertiesMethod</c> is used.
            </summary>
        </member>
        <member name="M:Tmds.DBus.DBusInterfaceAttribute.#ctor(System.String)">
            <summary>
            Creates a DBusInterfaceAttribute with the specified D-Bus interface name.
            </summary>
            <param name="name">D-Bus interface name</param>
        </member>
        <member name="T:Tmds.DBus.DictionaryAttribute">
            <summary>
            Indicates the type must be marshalled as a D-Bus dictionary of <c>a{sv}</c>.
            </summary>
        </member>
        <member name="T:Tmds.DBus.DisconnectedException">
            <summary>
            Exception thrown when the D-Bus connection was closed after being succesfully established. When the connection is
            closed during the connect operation, ConnectException is thrown instead.
            </summary>
        </member>
        <member name="T:Tmds.DBus.IConnection">
            <summary>
            Interface of the Connection class.
            </summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.ConnectAsync">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.CreateProxy``1(System.String,Tmds.DBus.ObjectPath)">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="E:Tmds.DBus.IConnection.StateChanged">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.ListServicesAsync">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.ListActivatableServicesAsync">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.ResolveServiceOwnerAsync(System.String)">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.ResolveServiceOwnerAsync(System.String,System.Action{Tmds.DBus.ServiceOwnerChangedEventArgs},System.Action{System.Exception})">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.ActivateServiceAsync(System.String)">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.IsServiceActiveAsync(System.String)">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.QueueServiceRegistrationAsync(System.String,System.Action,System.Action,Tmds.DBus.ServiceRegistrationOptions)">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.QueueServiceRegistrationAsync(System.String,Tmds.DBus.ServiceRegistrationOptions)">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.RegisterServiceAsync(System.String,System.Action,Tmds.DBus.ServiceRegistrationOptions)">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.RegisterServiceAsync(System.String,Tmds.DBus.ServiceRegistrationOptions)">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.UnregisterServiceAsync(System.String)">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.RegisterObjectAsync(Tmds.DBus.IDBusObject)">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.RegisterObjectsAsync(System.Collections.Generic.IEnumerable{Tmds.DBus.IDBusObject})">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.UnregisterObject(Tmds.DBus.ObjectPath)">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.UnregisterObject(Tmds.DBus.IDBusObject)">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.UnregisterObjects(System.Collections.Generic.IEnumerable{Tmds.DBus.ObjectPath})">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="M:Tmds.DBus.IConnection.UnregisterObjects(System.Collections.Generic.IEnumerable{Tmds.DBus.IDBusObject})">
            <summary><see cref="T:Tmds.DBus.Connection"/></summary>
        </member>
        <member name="T:Tmds.DBus.IDBusObject">
            <summary>
            Base interface for D-Bus objects.
            </summary>
        </member>
        <member name="P:Tmds.DBus.IDBusObject.ObjectPath">
            <summary>
            Path of the D-Bus object.
            </summary>
        </member>
        <member name="T:Tmds.DBus.ObjectPath">
            <summary>
            Path to D-Bus object.
            </summary>
        </member>
        <member name="F:Tmds.DBus.ObjectPath.Root">
            <summary>
            Root path (<c>"/"</c>).
            </summary>
        </member>
        <member name="M:Tmds.DBus.ObjectPath.#ctor(System.String)">
            <summary>
            Creates a new ObjectPath.
            </summary>
            <param name="value">path.</param>
        </member>
        <member name="M:Tmds.DBus.ObjectPath.CompareTo(Tmds.DBus.ObjectPath)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that
            indicates whether the current instance precedes, follows, or occurs in the same position in
            the sort order as the other object.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ObjectPath.CompareTo(System.Object)">
            <summary>
            Compares the current instance with another object of the same type and returns an integer that
            indicates whether the current instance precedes, follows, or occurs in the same position in
            the sort order as the other object.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ObjectPath.Equals(Tmds.DBus.ObjectPath)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ObjectPath.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ObjectPath.op_Equality(Tmds.DBus.ObjectPath,Tmds.DBus.ObjectPath)">
            <summary>
            Determines whether two specified ObjectPaths have the same value.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ObjectPath.op_Inequality(Tmds.DBus.ObjectPath,Tmds.DBus.ObjectPath)">
            <summary>
            Determines whether two specified ObjectPaths have different values.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ObjectPath.GetHashCode">
            <summary>
            Returns the hash code for this ObjectPath.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ObjectPath.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ObjectPath.op_Implicit(System.String)~Tmds.DBus.ObjectPath">
            <summary>
            Creates the ObjectPath that is represented by the string value.
            </summary>
            <param name="value">path.</param>
        </member>
        <member name="T:Tmds.DBus.PropertyAccess">
            <summary>
            The mutability of a property
            </summary>
        </member>
        <member name="F:Tmds.DBus.PropertyAccess.ReadWrite">
            <summary>
            Allows the property to be read and written
            </summary>
        </member>
        <member name="F:Tmds.DBus.PropertyAccess.Read">
            <summary>
            Allows the property to only be read
            </summary>
        </member>
        <member name="F:Tmds.DBus.PropertyAccess.Write">
            <summary>
            Allows the property to only be written to
            </summary>
        </member>
        <member name="T:Tmds.DBus.PropertyAttribute">
            <summary>
            Overrides how the property is handled.
            </summary>
        </member>
        <member name="P:Tmds.DBus.PropertyAttribute.Name">
            <summary>
            If not null, used to override the autogenerated name.
            </summary>
        </member>
        <member name="P:Tmds.DBus.PropertyAttribute.Access">
            <summary>
            Specifies the mutability of the property.
            </summary>
        </member>
        <member name="T:Tmds.DBus.PropertyChanges">
            <summary>
            Event data for the properties changed event.
            </summary>
        </member>
        <member name="P:Tmds.DBus.PropertyChanges.Changed">
            <summary>
            Properties that have changed with their new value.
            </summary>
        </member>
        <member name="P:Tmds.DBus.PropertyChanges.Invalidated">
            <summary>
            Properties that have changed.
            </summary>
        </member>
        <member name="M:Tmds.DBus.PropertyChanges.#ctor(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.String[])">
            <summary>
            Creates a PropertyChanges event.
            </summary>
            <param name="changed">Properties that changed with their new value.</param>
            <param name="invalidated">Properties that changed without providing new value.</param>
        </member>
        <member name="M:Tmds.DBus.PropertyChanges.ForProperty(System.String,System.Object)">
            <summary>
            Creates a PropertyChanges event for a single value change.
            </summary>
        </member>
        <member name="M:Tmds.DBus.PropertyChanges.Get``1(System.String)">
            <summary>
            Retrieves value for a specific property. <c>default(T)</c> is returned when the property is not present.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="name">Property name.</param>
            <returns>
            Value of the property. <c>default(T)</c> when property not present.
            </returns>
        </member>
        <member name="M:Tmds.DBus.PropertyChanges.GetStruct``1(System.String)">
            <summary>
            Retrieves value for a specific property. <c>default(T?)</c> is returned when the property is not present.
            </summary>
            <typeparam name="T">Type of the property.</typeparam>
            <param name="name">Property name.</param>
            <returns>
            Value of the property. <c>default(T?)</c> when property not present.
            </returns>
        </member>
        <member name="T:Tmds.DBus.ProtocolException">
            <summary>
            Exception thrown when there is an error in the D-Bus protocol.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ProtocolException.#ctor(System.String)">
            <summary>
            Creates an instance of the ProtocolException with the specified message.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
        </member>
        <member name="T:Tmds.DBus.ServerConnectionOptions">
            <summary>
            Options that configure the behavior of a Connection for a D-Bus local server.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ServerConnectionOptions.StartAsync(System.String)">
            <summary>
            Starts the server at the specified address.
            </summary>
            <param name="address">Address of the D-Bus peer.</param>
            <returns>
            Bound address.
            </returns>
        </member>
        <member name="M:Tmds.DBus.ServerConnectionOptions.StartAsync(Tmds.DBus.ServerStartOptions)">
            <summary>
            Starts the server with the specified options.
            </summary>
            <param name="options"></param>
            <returns>
            Bound address.
            </returns>
        </member>
        <member name="T:Tmds.DBus.ServerStartOptions">
            <summary>
            Options that configure the behavior of ServerConnectionOptions.Start.
            </summary>
        </member>
        <member name="P:Tmds.DBus.ServerStartOptions.Address">
            <summary>
            Listen address (e.g. 'tcp:host=localhost').
            </summary>
        </member>
        <member name="T:Tmds.DBus.ServiceOwnerChangedEventArgs">
            <summary>
            Event data for the ServiceOwnerChanged event.
            </summary>
        </member>
        <member name="M:Tmds.DBus.ServiceOwnerChangedEventArgs.#ctor(System.String,System.String,System.String)">
            <summary>
            Creates an instance of ServiceOwnerChangedEventArgs.
            </summary>
            <param name="serviceName">The name of the service.</param>
            <param name="oldOwner">The previous owner of the service.</param>
            <param name="newOwner">The new owner of the service.</param>
        </member>
        <member name="P:Tmds.DBus.ServiceOwnerChangedEventArgs.ServiceName">
            <summary>
            Name of the service.
            </summary>
        </member>
        <member name="P:Tmds.DBus.ServiceOwnerChangedEventArgs.OldOwner">
            <summary>
            Local name of the previous owner. <c>null</c> when there is no previous owner.
            </summary>
        </member>
        <member name="P:Tmds.DBus.ServiceOwnerChangedEventArgs.NewOwner">
            <summary>
            Local name of the new owner. <c>null</c> when there is no new owner.
            </summary>
        </member>
        <member name="T:Tmds.DBus.ServiceRegistrationOptions">
            <summary>
            Options for service name registration.
            </summary>
        </member>
        <member name="F:Tmds.DBus.ServiceRegistrationOptions.None">
            <summary>No options.</summary>
        </member>
        <member name="F:Tmds.DBus.ServiceRegistrationOptions.ReplaceExisting">
            <summary>Replace the existing owner.</summary>
        </member>
        <member name="F:Tmds.DBus.ServiceRegistrationOptions.AllowReplacement">
            <summary>Allow registration to be replaced.</summary>
        </member>
        <member name="F:Tmds.DBus.ServiceRegistrationOptions.Default">
            <summary>Default (<c>ReplaceExisting | AllowReplacement</c>)</summary>
        </member>
        <member name="T:Tmds.DBus.ServiceStartResult">
            <summary>
            Result of the service activation request.
            </summary>
        </member>
        <member name="F:Tmds.DBus.ServiceStartResult.Started">
            <summary>The service was started.</summary>
        </member>
        <member name="F:Tmds.DBus.ServiceStartResult.AlreadyRunning">
            <summary>The service was already running.</summary>
        </member>
        <member name="T:Tmds.DBus.SignalWatcher">
            <summary>
            Helper class for implementing D-Bus signals.
            </summary>
        </member>
        <member name="M:Tmds.DBus.SignalWatcher.AddAsync``1(System.Object,System.String,System.Action{``0})">
            <summary>
            Emits on the handler when the event is raised and returns an IDisposable that removes the handler.
            </summary>
            <param name="o">Object that emits events.</param>
            <param name="eventName">Name of the event.</param>
            <param name="handler">Action to be invoked when the event is raised.</param>
            <returns>
            Disposable that removes the handler from the event.
            </returns>
        </member>
        <member name="M:Tmds.DBus.SignalWatcher.AddAsync(System.Object,System.String,System.Action)">
            <summary>
            Emits on the handler when the event is raised and returns an IDisposable that removes the handler.
            </summary>
            <param name="o">Object that emits events.</param>
            <param name="eventName">Name of the event.</param>
            <param name="handler">Action to be invoked when the event is raised.</param>
            <returns>
            Disposable that removes the handler from the event.
            </returns>
        </member>
        <member name="T:Tmds.DBus.Signature">
            <summary>
            D-Bus type signature.
            </summary>
        </member>
        <member name="M:Tmds.DBus.Signature.op_Equality(Tmds.DBus.Signature,Tmds.DBus.Signature)">
            <summary>
            Determines whether two specified Signatures have the same value.
            </summary>
        </member>
        <member name="M:Tmds.DBus.Signature.op_Inequality(Tmds.DBus.Signature,Tmds.DBus.Signature)">
            <summary>
            Determines whether two specified Signatures have different values.
            </summary>
        </member>
        <member name="M:Tmds.DBus.Signature.Equals(System.Object)">
            <summary>
            Determines whether the specified object is equal to the current object.
            </summary>
        </member>
        <member name="M:Tmds.DBus.Signature.GetHashCode">
            <summary>
            Returns the hash code for this Signature.
            </summary>
        </member>
        <member name="M:Tmds.DBus.Signature.#ctor(System.String)">
            <summary>
            Creates a new Signature.
            </summary>
            <param name="value">signature.</param>
        </member>
        <member name="M:Tmds.DBus.Signature.op_Implicit(System.String)~Tmds.DBus.Signature">
            <summary>
            Creates a new Signature.
            </summary>
            <param name="value">signature.</param>
        </member>
        <member name="P:Tmds.DBus.Signature.Length">
            <summary>
            Length of the Signature.
            </summary>
        </member>
        <member name="M:Tmds.DBus.Signature.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
        </member>
        <member name="T:Tmds.DBus.Transports.UnixDomainSocketEndPoint">
            <summary>Represents a Unix Domain Socket endpoint as a path.</summary>
        </member>
    </members>
</doc>
