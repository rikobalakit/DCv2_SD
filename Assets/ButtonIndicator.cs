// Generated by ChatGPT and Riko Balakit/Pearl Grey
using System;
using UnityEngine;
using UnityEngine.UI;
using GSA;

public class ButtonIndicator : MonoBehaviour
{
    private enum ButtonType
    {
        Button,
        Trigger,
        DPadLeft,
        DPadRight,
        DPadUp,
        DPadDown
    }

    private enum GameButton
    {
        None,
        A,
        B,
        X,
        Y,
        L1,
        R1,
        L2,
        R2,
        L3,
        R3,
        Start,
        Select,
        DPadUp,
        DPadDown,
        DPadLeft,
        DPadRight
    }

    [SerializeField] private Image _backgroundPanel;
    [SerializeField] private ButtonType _buttonType;
    [SerializeField] private GameButton _gameButton;

    private Color _colorActive = new Color(1f, 1f, 1f, 0.8f);
    private Color _colorDown = new Color(1f, 1f, 1f, 0.1f);
    private Color _colorUp = new Color(1f, 1f, 1f, 1f);
    private Color _colorInactive = new Color(1f, 1f, 1f, 0.25f);
    private Color _colorOff = new Color(1f, 1f, 1f, 0.05f);

    void Update()
    {
        if (!InputManager.I)
        {
            _backgroundPanel.color = _colorOff;
            return;
        }

        switch (_buttonType)
        {
            case ButtonType.Button:
                HandleButton();
                break;
            case ButtonType.Trigger:
                HandleTrigger();
                break;
            case ButtonType.DPadUp:
                _backgroundPanel.color = InputManager.I.DPadUpPressed ? _colorActive : _colorInactive;
                break;
            case ButtonType.DPadDown:
                _backgroundPanel.color = InputManager.I.DPadDownPressed ? _colorActive : _colorInactive;
                break;
            case ButtonType.DPadLeft:
                _backgroundPanel.color = InputManager.I.DPadLeftPressed ? _colorActive : _colorInactive;
                break;
            case ButtonType.DPadRight:
                _backgroundPanel.color = InputManager.I.DPadRightPressed ? _colorActive : _colorInactive;
                break;
        }
    }

    private void HandleButton()
    {
        bool isPressed = _gameButton switch
        {
            GameButton.A => InputManager.I.FaceA,
            GameButton.B => InputManager.I.FaceB,
            GameButton.X => InputManager.I.FaceX,
            GameButton.Y => InputManager.I.FaceY,
            GameButton.L1 => InputManager.I.L1,
            GameButton.R1 => InputManager.I.R1,
            GameButton.L3 => InputManager.I.L3,
            GameButton.R3 => InputManager.I.R3,
            GameButton.Start => InputManager.I.StartButton,
            GameButton.Select => InputManager.I.SelectButton,
            _ => false
        };

        _backgroundPanel.color = isPressed ? _colorActive : _colorInactive;
    }

    private void HandleTrigger()
    {
        float triggerValue = _gameButton switch
        {
            GameButton.L2 => InputManager.I.L2,
            GameButton.R2 => InputManager.I.R2,
            _ => 0f
        };

        float lerpRatioInactive = 0.3f;
        float lerpRatioActive = 1f - lerpRatioInactive;
        _backgroundPanel.color = triggerValue == 0f
            ? _colorInactive
            : Color.Lerp(_colorInactive, _colorActive, lerpRatioInactive + triggerValue * lerpRatioActive);
    }
}
