using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.UI;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
// The code generated by `dotnet dbus codegen`.
using bluez.DBus;
// See https://developers.redhat.com/blog/2017/09/18/connecting-net-core-d-bus/ or https://github.com/tmds/Tmds.DBus
using Tmds.DBus;
using Debug = UnityEngine.Debug;


public class BluetoothConsole : MonoBehaviour
{

    [SerializeField]
    private Text _console;

    private float _currentOrientationX;
    private float _currentOrientationY;
    private float _currentOrientationZ;
    private float _currentBatteryVoltage;

    [SerializeField]
    private Transform _rotateCube;

    [SerializeField]
    private Text _voltageText;

    private bool _sensorEnabled = true;


    private void Start()
    {
        Scan();
        _console.text += "\n" + "Initialized";
        UpdateButtonText();
    }

    private void Update()
    {
        
        // note: XYZ is ZXY
        _rotateCube.localRotation = Quaternion.Slerp(_rotateCube.localRotation, Quaternion.Euler(_currentOrientationZ, _currentOrientationX, _currentOrientationY),
            Time.deltaTime * 10f);
        
        _voltageText.text = $"{_currentBatteryVoltage:0.00}";
        if (_sensorEnabled)
        {
            _voltageText.text += "\nIMU ENABLED";
        }
        else
        {
            _voltageText.text += "\nIMU DISABLED";
        }

    }

    public void ToggleSensor()
    {
        _sensorEnabled = !_sensorEnabled;

        UpdateButtonText();
    }

    private void UpdateButtonText()
    {
        if (_sensorEnabled)
        {
            _console.text = "DISABLE SENSOR";
        }
        else
        {
            _console.text = "ENABLE SENSOR";
        }
    }

    public void Scan()
    {
        _console.text += "\n" + "Not implemented";

        var adapterName = "hci0";

        var adapterObjectPath = $"/org/bluez/{adapterName}";
        var adapter = Connection.System.CreateProxy<IAdapter1>(BluezConstants.DBusService, adapterObjectPath);

        if (adapter == null)
        {
            _console.text += "\n" + ($"Bluetooth adapter '{adapterName}' not found.");
        }
        else
        {
            _console.text += "\n" + "Adapter found";
        }

        ScanAsync(adapter);

        // Find the Bluetooth peripheral.


    }

    private async void ScanAsync(IAdapter1 adapter)
    {
        var deviceAddress = "58:CF:79:F1:76:7A";


        var device = await adapter.GetDeviceAsync(deviceAddress);

        if (device == null)
        {
            _console.text += "\n" +
                $"Bluetooth peripheral with address '{deviceAddress}' not found. Use `bluetoothctl` or Bluetooth Manager to scan and possibly pair first.";
            return;
        }

        _console.text += "\n" + $"Found robot named {await device.GetNameAsync()}";


        _console.text += "\n" + ("Connecting...");
        await device.ConnectAsync();


        //await WaitForPropertyValueAsync<bool>("Connected", device.GetConnectedAsync(), value: true, 5);
        _console.text += "\n" + ("Connected.");


        var servicesUUID = await device.GetUUIDsAsync();
        _console.text += "\n" + ($"Device offers {servicesUUID.Length} service(s).");

        var deviceInfoServiceFound = servicesUUID.Any(uuid => String.Equals(uuid, GattConstants.DeviceInformationServiceUUID, StringComparison.OrdinalIgnoreCase));

        if (!deviceInfoServiceFound)
        {
            _console.text += "\n" + ("Device doesn't have the Device Information Service. Try pairing first?");
            return;
        }

        var service = await device.GetServiceAsync(GattConstants.DeviceInformationServiceUUID);

        var orientationAllCharacteristic = await service.GetCharacteristicAsync(GattConstants.OrientationAllUUID);
        var ctrlAllCharacteristic = await service.GetCharacteristicAsync(GattConstants.CtrlAllUUID);


        byte[] orientationAll;
        int characteristicsFound = 0;

        var timeout = TimeSpan.FromSeconds(5);

        if (orientationAllCharacteristic != null)
        {
            characteristicsFound++;
            _console.text += "\n" + ("Reading orientationAllCharacteristic...");
            orientationAll = await orientationAllCharacteristic.ReadValueAsync(timeout);
            _console.text += "\n" + ($"orientationAllCharacteristic: {Encoding.UTF8.GetString(orientationAll)}");
        }

        int defaultAngle = 90;

        if (ctrlAllCharacteristic != null)
        {
            characteristicsFound++;
            _console.text += "\n" + ("Reading ctrlLCharacteristic...");
            var manufacturerBytes = await ctrlAllCharacteristic.ReadValueAsync(timeout);
            _console.text += "\n" + ($"ctrlCharacteristic: {Encoding.UTF8.GetString(manufacturerBytes)}");
        }

        if (characteristicsFound == 0)
        {
            _console.text += "\n" + ("Model name and manufacturer characteristics not found.");
        }


        var taskS = JoystickTask(ctrlAllCharacteristic);
        var taskAll = SensorAllTask(orientationAllCharacteristic);
        await Task.WhenAll(taskS, taskAll);


    }

    private async Task JoystickTask(IGattCharacteristic1 characteristicAll)
    {
        var timeout = TimeSpan.FromSeconds(5);


        while (Application.isPlaying)
        {
            short safetyOffset = 0;
            
            short lValue = (short)((Input.GetAxis("LY") * -90f + 90f) + safetyOffset);
            short rValue = (short)((Input.GetAxis("RY") * -90f + 90f) + safetyOffset);
            short w0Value = (short)((Input.GetAxis("L2") * -90f + 90f) + safetyOffset);
            short w1Value = (short)((Input.GetAxis("R2") * -90f + 90f) + safetyOffset);

            byte[] ctrlValue = (BitConverter.GetBytes(lValue).Concat(BitConverter.GetBytes(rValue)).Concat(BitConverter.GetBytes(w0Value)).Concat(BitConverter.GetBytes(w1Value))).ToArray();


            var writeL = characteristicAll.WriteValueAsync(ctrlValue, timeout);

            await Task.WhenAll(writeL);

            //Debug.LogError($"joystick task {Time.time:0.000}");
        }
    }

    private async Task SensorAllTask(IGattCharacteristic1 characteristicAll)
    {
        var timeout = TimeSpan.FromSeconds(5);

        while (Application.isPlaying)
        {

            //Debug.LogError($"sensor task {Time.time:0.000}");


            byte[] orientationAll;
            orientationAll = await characteristicAll.ReadValueAsync(timeout);
            byte[] xBytes = {orientationAll[0], orientationAll[1]};
            byte[] yBytes = {orientationAll[2], orientationAll[3]};
            byte[] zBytes = {orientationAll[4], orientationAll[5]};
            byte[] voltageBytes = {orientationAll[6], orientationAll[7]};

            _currentOrientationX = (float) BitConverter.ToInt16(xBytes);
            _currentOrientationY = (float) BitConverter.ToInt16(yBytes);
            _currentOrientationZ = (float) BitConverter.ToInt16(zBytes);
            _currentBatteryVoltage = (float) BitConverter.ToInt16(voltageBytes) / 1000f;

        }
    }

}

/*

// Use the `bluetoothctl` command-line tool or the Bluetooth Manager GUI to scan for devices and possibly pair.
// Then you can use this program to connect and print "Device Information" GATT service values.
class Program
{
  static string defaultAdapterName = "hci0";
  static TimeSpan timeout = TimeSpan.FromSeconds(15);

  static async Task Main(string[] args)
  {
    if (args.Length < 1)
    {
      Console.WriteLine("Usage: BlueZExample <deviceAddress> [adapterName]");
      Console.WriteLine("Example: BlueZExample AA:BB:CC:11:22:33 hci1");
      return;
    }

    var deviceAddress = args[0];
    var adapterName = args.Length > 1 ? args[1] : defaultAdapterName;

    // Get the Bluetooth adapter.
    var adapterObjectPath = $"/org/bluez/{adapterName}";
    var adapter = Connection.System.CreateProxy<IAdapter1>(BluezConstants.DBusService, adapterObjectPath);
    if (adapter == null)
    {
      Console.WriteLine($"Bluetooth adapter '{adapterName}' not found.");
    }

    // Find the Bluetooth peripheral.
    var device = await adapter.GetDeviceAsync(deviceAddress);
    if (device == null)
    {
      Console.WriteLine($"Bluetooth peripheral with address '{deviceAddress}' not found. Use `bluetoothctl` or Bluetooth Manager to scan and possibly pair first.");
      return;
    }

    Console.WriteLine("Connecting...");
    await device.ConnectAsync();
    await WaitForPropertyValueAsync<bool>("Connected", device.GetConnectedAsync, value: true, timeout);
    Console.WriteLine("Connected.");

    Console.WriteLine("Waiting for services to resolve...");
    await WaitForPropertyValueAsync<bool>("ServicesResolved", device.GetServicesResolvedAsync, value: true, timeout);

    var servicesUUID = await device.GetUUIDsAsync();
    Console.WriteLine($"Device offers {servicesUUID.Length} service(s).");

    var deviceInfoServiceFound = servicesUUID.Any(uuid => String.Equals(uuid, GattConstants.DeviceInformationServiceUUID, StringComparison.OrdinalIgnoreCase));
    if (!deviceInfoServiceFound)
    {
      Console.WriteLine("Device doesn't have the Device Information Service. Try pairing first?");
      return;
    }

    // Console.WriteLine("Retrieving Device Information service...");
    var service = await device.GetServiceAsync(GattConstants.DeviceInformationServiceUUID);
    var modelNameCharacteristic = await service.GetCharacteristicAsync(GattConstants.ModelNameCharacteristicUUID);
    var manufacturerCharacteristic = await service.GetCharacteristicAsync(GattConstants.ManufacturerNameCharacteristicUUID);

    int characteristicsFound = 0;
    if (modelNameCharacteristic != null)
    {
        characteristicsFound++;
        Console.WriteLine("Reading model name characteristic...");
        var modelNameBytes = await modelNameCharacteristic.ReadValueAsync(timeout);
        Console.WriteLine($"Model name: {Encoding.UTF8.GetString(modelNameBytes)}");
    }

    if (manufacturerCharacteristic != null)
    {
        characteristicsFound++;
        Console.WriteLine("Reading manufacturer characteristic...");
        var manufacturerBytes = await manufacturerCharacteristic.ReadValueAsync(timeout);
        Console.WriteLine($"Manufacturer: {Encoding.UTF8.GetString(manufacturerBytes)}");
    }

    if (characteristicsFound == 0)
    {
        Console.WriteLine("Model name and manufacturer characteristics not found.");
    }
  }


*/


// Extensions that make it easier to get a D-Bus object or read a characteristic value.
static class Extensions
{

    public static Task<IReadOnlyList<IDevice1>> GetDevicesAsync(this IAdapter1 adapter)
    {
        return GetProxiesAsync<IDevice1>(adapter, BluezConstants.Device1Interface);
    }

    public static async Task<IDevice1> GetDeviceAsync(this IAdapter1 adapter, string deviceAddress)
    {
        var devices = await GetProxiesAsync<IDevice1>(adapter, BluezConstants.Device1Interface);
        var matches = new List<IDevice1>();

        foreach (var device in devices)
        {
            if (String.Equals(await device.GetAddressAsync(), deviceAddress, StringComparison.OrdinalIgnoreCase))
            {
                matches.Add(device);
            }
        }

        // BlueZ can get in a weird state, probably due to random public BLE addresses.
        if (matches.Count > 1)
        {
            throw new Exception($"{matches.Count} devices found with the address {deviceAddress}!");
        }

        return matches.FirstOrDefault();
    }

    public static async Task<IGattService1> GetServiceAsync(this IDevice1 device, string serviceUUID)
    {
        var services = await GetProxiesAsync<IGattService1>(device, BluezConstants.GattServiceInterface);

        foreach (var service in services)
        {
            if (String.Equals(await service.GetUUIDAsync(), serviceUUID, StringComparison.OrdinalIgnoreCase))
            {
                return service;
            }
        }

        return null;
    }

    public static async Task<IGattCharacteristic1> GetCharacteristicAsync(this IGattService1 service, string characteristicUUID)
    {
        var characteristics = await GetProxiesAsync<IGattCharacteristic1>(service, BluezConstants.GattCharacteristicInterface);

        foreach (var characteristic in characteristics)
        {
            if (String.Equals(await characteristic.GetUUIDAsync(), characteristicUUID, StringComparison.OrdinalIgnoreCase))
            {
                return characteristic;
            }
        }

        return null;
    }

    public static async Task<byte[]> ReadValueAsync(this IGattCharacteristic1 characteristic, TimeSpan timeout)
    {
        var options = new Dictionary<string, object>();
        var readTask = characteristic.ReadValueAsync(options);
        var timeoutTask = Task.Delay(timeout);

        await Task.WhenAny(new Task[] {readTask, timeoutTask});

        if (!readTask.IsCompleted)
        {
            throw new TimeoutException("Timed out waiting to read characteristic value.");
        }

        return await readTask;
    }


    public static async Task WriteValueAsync(this IGattCharacteristic1 characteristic, byte[] newValue, TimeSpan timeout)
    {
        var options = new Dictionary<string, object>();
        var writeTask = characteristic.WriteValueAsync(newValue, options);
        var timeoutTask = Task.Delay(timeout);

        await Task.WhenAny(new Task[] {writeTask, timeoutTask});

        if (!writeTask.IsCompleted)
        {
            throw new TimeoutException("Timed out waiting to write characteristic value.");
        }

        return;
    }

    public static async Task NotifyValueAsync(this IGattCharacteristic1 characteristic, byte[] newValue, TimeSpan timeout)
    {
        var options = new Dictionary<string, object>();
        var notifyTask = characteristic.WriteValueAsync(newValue, options);
        var timeoutTask = Task.Delay(timeout);

        await Task.WhenAny(new Task[] {notifyTask, timeoutTask});

        if (!notifyTask.IsCompleted)
        {
            throw new TimeoutException("Timed out waiting to write characteristic value.");
        }

        return;
    }

    private static async Task<IReadOnlyList<T>> GetProxiesAsync<T>(IDBusObject rootObject, string interfaceName)
    {
        // Console.WriteLine("GetProxiesAsync called.");
        var objectManager = Connection.System.CreateProxy<IObjectManager>(BluezConstants.DBusService, "/");
        var objects = await objectManager.GetManagedObjectsAsync();

        var matchingObjects = objects
            .Where(obj => obj.Value.Keys.Contains(interfaceName))
            .Select(obj => obj.Key)
            .Where(objectPath => objectPath.ToString().StartsWith($"{rootObject.ObjectPath}/"));

        var proxies = matchingObjects
            .Select(objectPath => Connection.System.CreateProxy<T>(BluezConstants.DBusService, objectPath))
            .ToList();

        // Console.WriteLine($"GetProxiesAsync returning {proxies.Count} proxies of type {typeof(T)}.");
        return proxies;
    }

}


static class GattConstants
{

    // "Device Information" GATT service
    // https://www.bluetooth.org/docman/handlers/downloaddoc.ashx?doc_id=244369
    public const string DeviceInformationServiceUUID = "7ac5d0b9-a214-4c2b-b02a-7d300d756709";

    public const string CtrlAllUUID = "1d340766-ffa2-4aed-b03d-cf3796a46d82";
    public const string CtrlRUUID = "ec7e03b4-d6d8-4ad7-a1e0-0e48fe405bb8";

    public const string OrientationAllUUID = "64dc361e-9e25-4ab9-aa07-4813b15f2c83";

}


static class BluezConstants
{

    public const string DBusService = "org.bluez";
    public const string Adapter1Interface = "org.bluez.Adapter1";
    public const string Device1Interface = "org.bluez.Device1";
    public const string GattServiceInterface = "org.bluez.GattService1";
    public const string GattCharacteristicInterface = "org.bluez.GattCharacteristic1";

}